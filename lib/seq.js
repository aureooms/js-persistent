"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function seq(_empty, size) {

	var Seq = function Seq(tree) {
		this.tree = tree;
	};

	Seq.prototype.empty = function () {
		return this.tree.empty();
	};

	Seq.prototype.measure = Seq.prototype.len = function () {
		return this.tree.measure();
	};

	Seq.prototype.head = function () {
		return this.tree.head();
	};

	Seq.prototype.tail = function () {
		return new Seq(this.tree.tail());
	};

	Seq.prototype.last = function () {
		return this.tree.last();
	};

	Seq.prototype.init = function () {
		return new Seq(this.tree.init());
	};

	Seq.prototype.cons = function (value) {
		return new Seq(this.tree.cons(value));
	};

	Seq.prototype.push = function (value) {
		return new Seq(this.tree.push(value));
	};

	Seq.prototype.append = function (iterable) {
		return new Seq(this.tree.append(iterable));
	};

	Seq.prototype.prepend = function (iterable) {
		return new Seq(this.tree.prepend(iterable));
	};

	Seq.prototype.concat = function (other) {
		return new Seq(this.tree.concat(other.tree));
	};

	Seq.prototype.takeUntil = function (predicate) {
		return new Seq(this.tree.takeUntil(predicate));
	};

	Seq.prototype.dropUntil = function (predicate) {
		return new Seq(this.tree.dropUntil(predicate));
	};

	Seq.prototype.set = function (index, value) {

		if (index < 0 || index >= this.len()) throw new Error("wrong index '" + index + "'");

		var split = this.tree.splitTree(function (m) {
			return m > index;
		}, size.zero());

		return new Seq(split.left.push(value).concat(split.right));
	};

	Seq.prototype.get = function (index) {

		if (index < 0 || index >= this.len()) throw new Error("wrong index '" + index + "'");

		return this.tree.splitTree(function (m) {
			return m > index;
		}, size.zero()).middle;
	};

	Seq.prototype[Symbol.iterator] = function () {
		return this.tree[Symbol.iterator]();
	};

	Seq.prototype.split = function (predicate) {
		var _tree$split = this.tree.split(predicate),
		    _tree$split2 = _slicedToArray(_tree$split, 2),
		    left = _tree$split2[0],
		    right = _tree$split2[1];

		return [new Seq(left), new Seq(right)];
	};

	Seq.prototype.splitAt = function (index) {
		return this.split(function (m) {
			return m > index;
		});
	};

	return {
		empty: function empty() {
			return new Seq(_empty(size));
		},
		from: function from(iterable) {
			return new Seq(_empty(size)).append(iterable);
		}
	};
}
exports.seq = seq;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zZXEuanMiXSwibmFtZXMiOlsic2VxIiwiZW1wdHkiLCJzaXplIiwiU2VxIiwidHJlZSIsInByb3RvdHlwZSIsIm1lYXN1cmUiLCJsZW4iLCJoZWFkIiwidGFpbCIsImxhc3QiLCJpbml0IiwiY29ucyIsInZhbHVlIiwicHVzaCIsImFwcGVuZCIsIml0ZXJhYmxlIiwicHJlcGVuZCIsImNvbmNhdCIsIm90aGVyIiwidGFrZVVudGlsIiwicHJlZGljYXRlIiwiZHJvcFVudGlsIiwic2V0IiwiaW5kZXgiLCJFcnJvciIsInNwbGl0Iiwic3BsaXRUcmVlIiwibSIsInplcm8iLCJsZWZ0IiwicmlnaHQiLCJnZXQiLCJtaWRkbGUiLCJTeW1ib2wiLCJpdGVyYXRvciIsInNwbGl0QXQiLCJmcm9tIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUNPLFNBQVNBLEdBQVQsQ0FBZUMsTUFBZixFQUF1QkMsSUFBdkIsRUFBOEI7O0FBRXJDLEtBQU1DLE1BQU0sU0FBTkEsR0FBTSxDQUFXQyxJQUFYLEVBQWtCO0FBQzdCLE9BQUtBLElBQUwsR0FBWUEsSUFBWjtBQUNBLEVBRkQ7O0FBSUFELEtBQUlFLFNBQUosQ0FBY0osS0FBZCxHQUFzQixZQUFhO0FBQ2xDLFNBQU8sS0FBS0csSUFBTCxDQUFVSCxLQUFWLEVBQVA7QUFDQSxFQUZEOztBQUlBRSxLQUFJRSxTQUFKLENBQWNDLE9BQWQsR0FDQUgsSUFBSUUsU0FBSixDQUFjRSxHQUFkLEdBQW9CLFlBQWE7QUFDaEMsU0FBTyxLQUFLSCxJQUFMLENBQVVFLE9BQVYsRUFBUDtBQUNBLEVBSEQ7O0FBS0FILEtBQUlFLFNBQUosQ0FBY0csSUFBZCxHQUFxQixZQUFhO0FBQ2pDLFNBQU8sS0FBS0osSUFBTCxDQUFVSSxJQUFWLEVBQVA7QUFDQSxFQUZEOztBQUlBTCxLQUFJRSxTQUFKLENBQWNJLElBQWQsR0FBcUIsWUFBYTtBQUNqQyxTQUFPLElBQUlOLEdBQUosQ0FBUyxLQUFLQyxJQUFMLENBQVVLLElBQVYsRUFB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LEVBQTBDdEIsS0FBSzJCLElBQUwsRUFBMUMsRUFBeURJLE1BQWhFO0FBRUEsRUFORDs7QUFTQTlCLEtBQUlFLFNBQUosQ0FBYzZCLE9BQU9DLFFBQXJCLElBQWlDLFlBQWE7QUFDN0MsU0FBTyxLQUFLL0IsSUFBTCxDQUFVOEIsT0FBT0MsUUFBakIsR0FBUDtBQUNBLEVBRkQ7O0FBSUFoQyxLQUFJRSxTQUFKLENBQWNxQixLQUFkLEdBQXNCLFVBQVdMLFNBQVgsRUFBdUI7QUFBQSxvQkFDbkIsS0FBS2pCLElBQUwsQ0FBVXNCLEtBQVYsQ0FBaUJMLFNBQWpCLENBRG1CO0FBQUE7QUFBQSxNQUNwQ1MsSUFEb0M7QUFBQSxNQUM3QkMsS0FENkI7O0FBRTVDLFNBQU8sQ0FBRSxJQUFJNUIsR0FBSixDQUFTMkIsSUFBVCxDQUFGLEVBQW9CLElBQUkzQixHQUFKLENBQVM0QixLQUFULENBQXBCLENBQVA7QUFDQSxFQUhEOztBQUtBNUIsS0FBSUUsU0FBSixDQUFjK0IsT0FBZCxHQUF3QixVQUFXWixLQUFYLEVBQW1CO0FBQzFDLFNBQU8sS0FBS0UsS0FBTCxDQUFZLFVBQUVFLENBQUY7QUFBQSxVQUFTQSxJQUFJSixLQUFiO0FBQUEsR0FBWixDQUFQO0FBQ0EsRUFGRDs7QUFJQSxRQUFPO0FBQ052QixTQUFRO0FBQUEsVUFBTyxJQUFJRSxHQUFKLENBQVNGLE9BQU9DLElBQVAsQ0FBVCxDQUFQO0FBQUEsR0FERjtBQUVObUMsUUFBTyxjQUFFckIsUUFBRjtBQUFBLFVBQWdCLElBQUliLEdBQUosQ0FBU0YsT0FBT0MsSUFBUCxDQUFULEVBQXlCYSxNQUF6QixDQUFpQ0MsUUFBakMsQ0FBaEI7QUFBQTtBQUZELEVBQVA7QUFLQyIsImZpbGUiOiJzZXEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBmdW5jdGlvbiBzZXEgKCBlbXB0eSAsIHNpemUgKSB7XG5cbmNvbnN0IFNlcSA9IGZ1bmN0aW9uICggdHJlZSApIHtcblx0dGhpcy50cmVlID0gdHJlZSA7XG59IDtcblxuU2VxLnByb3RvdHlwZS5lbXB0eSA9IGZ1bmN0aW9uICggKSB7XG5cdHJldHVybiB0aGlzLnRyZWUuZW1wdHkoICkgO1xufSA7XG5cblNlcS5wcm90b3R5cGUubWVhc3VyZSA9XG5TZXEucHJvdG90eXBlLmxlbiA9IGZ1bmN0aW9uICggKSB7XG5cdHJldHVybiB0aGlzLnRyZWUubWVhc3VyZSggKSA7XG59IDtcblxuU2VxLnByb3RvdHlwZS5oZWFkID0gZnVuY3Rpb24gKCApIHtcblx0cmV0dXJuIHRoaXMudHJlZS5oZWFkKCApIDtcbn0gO1xuXG5TZXEucHJvdG90eXBlLnRhaWwgPSBmdW5jdGlvbiAoICkge1xuXHRyZXR1cm4gbmV3IFNlcSggdGhpcy50cmVlLnRhaWwoICkgKSA7XG59IDtcblxuU2VxLnByb3RvdHlwZS5sYXN0ID0gZnVuY3Rpb24gKCApIHtcblx0cmV0dXJuIHRoaXMudHJlZS5sYXN0KCApIDtcbn0gO1xuXG5TZXEucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoICkge1xuXHRyZXR1cm4gbmV3IFNlcSggdGhpcy50cmVlLmluaXQoICkgKSA7XG59IDtcblxuU2VxLnByb3RvdHlwZS5jb25zID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblx0cmV0dXJuIG5ldyBTZXEoIHRoaXMudHJlZS5jb25zKCB2YWx1ZSApICkgO1xufSA7XG5cblNlcS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cdHJldHVybiBuZXcgU2VxKCB0aGlzLnRyZWUucHVzaCggdmFsdWUgKSApIDtcbn0gO1xuXG5TZXEucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uICggaXRlcmFibGUgKSB7XG5cdHJldHVybiBuZXcgU2VxKCB0aGlzLnRyZWUuYXBwZW5kKCBpdGVyYWJsZSApICkgO1xufSA7XG5cblNlcS5wcm90b3R5cGUucHJlcGVuZCA9IGZ1bmN0aW9uICggaXRlcmFibGUgKSB7XG5cdHJldHVybiBuZXcgU2VxKCB0aGlzLnRyZWUucHJlcGVuZCggaXRlcmFibGUgKSApIDtcbn0gO1xuXG5TZXEucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uICggb3RoZXIgKSB7XG5cdHJldHVybiBuZXcgU2VxKCB0aGlzLnRyZWUuY29uY2F0KCBvdGhlci50cmVlICkgKSA7XG59IDtcblxuU2VxLnByb3RvdHlwZS50YWtlVW50aWwgPSBmdW5jdGlvbiAoIHByZWRpY2F0ZSApIHtcblx0cmV0dXJuIG5ldyBTZXEoIHRoaXMudHJlZS50YWtlVW50aWwoIHByZWRpY2F0ZSApICkgO1xufSA7XG5cblNlcS5wcm90b3R5cGUuZHJvcFVudGlsID0gZnVuY3Rpb24gKCBwcmVkaWNhdGUgKSB7XG5cdHJldHVybiBuZXcgU2VxKCB0aGlzLnRyZWUuZHJvcFVudGlsKCBwcmVkaWNhdGUgKSApIDtcbn0gO1xuXG5TZXEucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uICggaW5kZXggLCB2YWx1ZSApIHtcblxuXHRpZiAoIGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLmxlbiggKSApIHRocm93IG5ldyBFcnJvciggYHdyb25nIGluZGV4ICcke2luZGV4fSdgICkgO1xuXG5cdGNvbnN0IHNwbGl0ID0gdGhpcy50cmVlLnNwbGl0VHJlZSggKCBtICkgPT4gbSA+IGluZGV4ICwgc2l6ZS56ZXJvKCApICkgO1xuXG5cdHJldHVybiBuZXcgU2VxKCBzcGxpdC5sZWZ0LnB1c2goIHZhbHVlICkuY29uY2F0KCBzcGxpdC5yaWdodCApICkgO1xuXG59IDtcblxuU2VxLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdGlmICggaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMubGVuKCApICkgdGhyb3cgbmV3IEVycm9yKCBgd3JvbmcgaW5kZXggJyR7aW5kZXh9J2AgKSA7XG5cblx0cmV0dXJuIHRoaXMudHJlZS5zcGxpdFRyZWUoICggbSApID0+IG0gPiBpbmRleCAsIHNpemUuemVybyggKSApLm1pZGRsZSA7XG5cbn0gO1xuXG5cblNlcS5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICggKSB7XG5cdHJldHVybiB0aGlzLnRyZWVbU3ltYm9sLml0ZXJhdG9yXSggKSA7XG59IDtcblxuU2VxLnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uICggcHJlZGljYXRlICkge1xuXHRjb25zdCBbIGxlZnQgLCByaWdodCBdID0gdGhpcy50cmVlLnNwbGl0KCBwcmVkaWNhdGUgKSA7XG5cdHJldHVybiBbIG5ldyBTZXEoIGxlZnQgKSAsIG5ldyBTZXEoIHJpZ2h0ICkgXSA7XG59IDtcblxuU2VxLnByb3RvdHlwZS5zcGxpdEF0ID0gZnVuY3Rpb24gKCBpbmRleCApIHtcblx0cmV0dXJuIHRoaXMuc3BsaXQoICggbSApID0+IG0gPiBpbmRleCApIDtcbn0gO1xuXG5yZXR1cm4ge1xuXHRlbXB0eSA6ICggKSA9PiBuZXcgU2VxKCBlbXB0eSggc2l6ZSApICkgLFxuXHRmcm9tIDogKCBpdGVyYWJsZSApID0+IG5ldyBTZXEoIGVtcHR5KCBzaXplICkgKS5hcHBlbmQoIGl0ZXJhYmxlIClcbn0gO1xuXG59XG4iXX0=